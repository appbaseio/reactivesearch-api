{
  "$id": "https://github.com/appbaseio-confidential/arc-noss/plugins/pipelines/es-pipeline-doc-in",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "additionalProperties": false,
  "preservedOrder": [
    "id",
    "enabled",
    "description",
    "priority",
    "routes",
    "envs",
    "trigger",
    "stages",
    "global_envs"
  ],
  "properties": {
    "description": {
      "description": "Description of pipeline.\n\nThis can be a brief explanation of what the pipeline does, this is useful for better understanding of what the pipeline is actually doing.",
      "title": "Description",
      "type": "string"
    },
    "enabled": {
      "description": "Set as 'false' to disable a Pipeline. Defaults to 'true'.\n\nThis field can be used to disable a pipeline to test some effect or in scenarios where the pipeline might need to be disabled.",
      "title": "Enable Pipeline",
      "type": "boolean"
    },
    "envs": {
      "description": "Useful to define custom environment variables which could be accessed by stages during pipeline execution.\n\n[Read more about pipeline environments over here](/docs/pipelines/concepts/envs-for-stage)",
      "title": "Pipeline Environments",
      "type": "object"
    },
    "global_envs": {
      "description": "Global Envs will be saved to the cluster and can be used in the pipeline.",
      "items": {
        "additionalProperties": false,
        "properties": {
          "created_at": {
            "type": "integer"
          },
          "description": {
            "description": "Description of the global variable to indicate what exactly this variable is for.",
            "title": "Description",
            "type": "string"
          },
          "id": {
            "description": "Unique Identifier for the Global variable.",
            "title": "Variable ID",
            "type": "string"
          },
          "key": {
            "description": "Key of the global variable. This key can be used to use this global variable in the pipeline.",
            "title": "Key",
            "type": "string"
          },
          "label": {
            "description": "Name of the global variable for reference and to be shown in the UI.",
            "title": "Label",
            "type": "string"
          },
          "updated_at": {
            "type": "integer"
          },
          "validate": {
            "additionalProperties": false,
            "description": "To validate the entered value of the global variable. This field can be used to validate the value entered for the current variable by following the specified validators.",
            "properties": {
              "body": {
                "description": "At times, there might be the need to pass the body in a response in order to get the `expected_status`. This is also supported by passing the body in the `body` field.\n\nThe body should be passed as a **string**. If JSON, this should be a stringified JSON.",
                "title": "Body"
              },
              "expected_status": {
                "description": "The `expected_status` field is used to make sure the validation was successful. It is an integer that should match the status code of the validate request when it is successful.",
                "title": "Expected Status",
                "type": "integer"
              },
              "headers": {
                "description": "Headers can be essential to alter the response received from hitting a particular URL. Headers can be passed during validating by using the `headers` field.\n\nFor eg, a `Content-Type` header can be passed in the following way:\n\n```yml\nglobal_envs:\n  - label: ES URL\n    key: ES_URL\n    value: http://localhost:9200\n    validate:\n      headers:\n        \"Content-Type\": \"application/json\"\n```",
                "title": "Headers",
                "type": "object"
              },
              "method": {
                "description": "It might be important to specify the method field in order to get the `expected_status`. This can be done by passing the method as a string. By default the value is set to `GET`.\n\nSome of the other valid options are:\n\n- `POST`\n- `PUT`\n- `PATCH`",
                "title": "Method",
                "type": "string"
              },
              "url": {
                "description": "The `url` field is used to specify the URL that is supposed to be hit during validating the global environment before adding it.",
                "title": "URL",
                "type": "string"
              }
            },
            "title": "Validate",
            "type": "object"
          },
          "value": {
            "description": "Value of the global variable. This can be considered the most important field of the global variable since this will contain the value of the global variable.",
            "title": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "title": "Global Envs",
      "type": "array"
    },
    "id": {
      "description": "Auto-generated unique identifier for pipeline.",
      "title": "Pipeline ID",
      "type": "string"
    },
    "priority": {
      "description": "In case of a conflict in pipeline routes, the pipeline with highest priority would get invoked.\n\nPriority is an important and useful field. This can be used to set the order in which pipelines with same route can be executed when a request comes.",
      "title": "Priority",
      "type": "integer"
    },
    "routes": {
      "description": "**This is a required field**\n\nPipeline routes.\n\nRoutes is an array of route which essentially indicates which routes the pipeline will be listening to. In other words, which routes will trigger the pipeline can be defined using this field.\n\nFollowing is an example of routes:\n\n```yml\nroutes:\n  - path: good-books-ds-pipeline/_reactivesearch\n    method: POST\n    classify:\n      category: reactivesearch\n```\n\nAbove code indicates that the pipeline will be triggered if the route is `good-books-ds-pipeline/_reactivesearch` and the method is `POST`.",
      "items": {
        "additionalProperties": false,
        "properties": {
          "classify": {
            "additionalProperties": false,
            "description": "Useful to categorize the route. This is extremely useful to understand what kind of request is being sent through the route is suggested to be used in all pipeline definitions as ReactiveSearch way better when this is defined properly.",
            "properties": {
              "acl": {
                "description": "It a sub-category of category.\n\nThis can be thought of as narrowing down the type of route. For eg, if category is the type of fruits, sub category can be type of a particular fruit. So Apple can be considered a category and Red or Green apples can be considered ACL's of Apple.",
                "title": "ACL",
                "type": "integer"
              },
              "category": {
                "description": "Route category.\n\nThis indicates the category of the route. This is useful for the internal functioning of the pipeline.",
                "title": "Category",
                "type": "integer"
              }
            },
            "required": [
              "category"
            ],
            "title": "Classify Route",
            "type": "object"
          },
          "method": {
            "description": "HTTP method for route.\n\nThis indicates the method which if it hits the route then the pipeline will be triggered.",
            "title": "Method",
            "type": "string"
          },
          "path": {
            "description": "Route path. For example, '/books-search'.\n\n[More can be read about the route matching process here](/docs/pipelines/concepts/execution-process).",
            "title": "Path",
            "type": "string"
          },
          "recordLogs": {
            "description": "If set to 'true', then Appbase would record logs for the pipeline route. Defaults to 'false'.",
            "title": "Record Logs",
            "type": "boolean"
          }
        },
        "required": [
          "path",
          "method"
        ],
        "type": "object"
      },
      "title": "Routes",
      "type": "array"
    },
    "stages": {
      "description": "**This is a required field**\n\nPipeline stages.\n\nStages can be thought of as steps of the pipeline that are executed (not always in the order of specification).\n\nFollowing is an example of pipeline stages:\n\n```yml\n\nstages:\n  - use: authorization\n  - use: useCache\n  - id: echo something\n    script: \"console.log(\\'Echoing something from a JS script instead of shell!\\');\"\n  - use: reactivesearchQuery\n    continueOnError: false\n  - use: elasticsearchQuery\n    continueOnError: false\n  - use: recordAnalytics\n```\n\nAbove uses some pre-built stages as well as a stage where the `script` field is used to just run some custom JavaScript. More can be read about the pre-built stages in the following section.",
      "items": {
        "additionalProperties": false,
        "anyOf": [
          {
            "required": [
              "use"
            ],
            "title": "use"
          },
          {
            "required": [
              "id"
            ],
            "title": "id"
          }
        ],
        "properties": {
          "async": {
            "description": "If set to 'true', then stage would get executed in parallel to other stages. Async stages can not modify the global 'request' and 'response' properties. Although, you can define a synchronous stage to consume the data of async stage (would be present in global context with stage id) to modify the global request/response.",
            "title": "Execute Asynchronously",
            "type": "boolean"
          },
          "continueOnError": {
            "description": "If set to 'false' and an error occurs in stage execution, then Pipeline execution would stop immediately with an error.",
            "title": "Continue on Error",
            "type": "boolean"
          },
          "description": {
            "description": "User-defined description for stage.",
            "title": "Description",
            "type": "string"
          },
          "enabled": {
            "description": "Set to 'false' to disable a stage. Defaults to 'true'.",
            "title": "Enabled",
            "type": "boolean"
          },
          "id": {
            "description": "User-defined unique identifier for stages. It is useful to define stage dependencies using 'needs' property.",
            "title": "Stage Id",
            "type": "string"
          },
          "inputs": {
            "description": "Inputs required for a pre-built stage execution. The inputs structure may vary for each stage.",
            "title": "Stage Inputs",
            "type": "object"
          },
          "needs": {
            "description": "Useful to define the dependencies among stages. For example, if stage 'A' depends on stages 'B' and 'C' then stage 'A' would define 'needs' property as ['B', 'C']. Stage 'A' would only get executed once the stages 'B' and 'C' are completed.",
            "items": {
              "type": "string"
            },
            "title": "Needs",
            "type": "array"
          },
          "script": {
            "description": "Custom script to modify the request/response. You can also write custom variables to global context which can be consumed by other stages.",
            "title": "Script",
            "type": "string"
          },
          "scriptRef": {
            "description": "Path to script file.\n\nThis is similar to _script_, except that it accepts a path to a file instead of an inline string. This is useful for cases where there is a very large JS script that needs to be used in one or more stages of a pipeline.",
            "title": "Script Reference",
            "type": "string"
          },
          "trigger": {
            "additionalProperties": false,
            "description": "Trigger will indicate whether or not to trigger the stage.",
            "properties": {
              "expression": {
                "description": "Custom trigger expression. You can read more at [here](https://docs.appbase.io/docs/search/rules/#advanced-editor).",
                "title": "Trigger Expression",
                "type": "string"
              }
            },
            "title": "Trigger",
            "type": "object"
          },
          "use": {
            "description": "Use a pre-built stage from Appbase.",
            "title": "Pre-built Stage",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "title": "Stages",
      "type": "array"
    },
    "trigger": {
      "additionalProperties": false,
      "description": "Trigger expression is to define the condition of Pipeline invocation. For example, only execute pipeline if query is \\'mobile phone\\'. Check the documentation at [here](https://docs.appbase.io/docs/search/rules/#configure-if-condition).\n\nFollowing is an example trigger for a pipeline that searches for mobile phones:\n\n```yml\ntrigger:\n  type: always\n  expression: $query exactlyMatches \"iphone x\"\n```\n\nAbove trigger will **always** run and execute the expression provided to it.",
      "properties": {
        "expression": {
          "description": "Custom trigger expression. You can read more at [here](https://docs.appbase.io/docs/search/rules/#advanced-editor).",
          "title": "Trigger Expression",
          "type": "string"
        },
        "timeframe": {
          "additionalProperties": false,
          "description": "To define the valid timeframe for trigger expression.",
          "properties": {
            "end_time": {
              "type": "integer"
            },
            "start_time": {
              "type": "integer"
            }
          },
          "title": "Timeframe",
          "type": "object"
        },
        "type": {
          "description": "Type of trigger expression. You can read more at [here](https://docs.appbase.io/docs/search/rules/#configure-if-condition).",
          "title": "Trigger Type",
          "type": "integer"
        }
      },
      "title": "Trigger Expression",
      "type": "object"
    }
  },
  "required": [
    "routes",
    "stages"
  ],
  "type": "object"
}